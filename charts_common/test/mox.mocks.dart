// Mocks generated by Mockito 5.4.4 from annotations
// in nimble_charts_common/test/mox.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:math' as _i18;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i12;
import 'package:nimble_charts_common/common.dart' as _i13;
import 'package:nimble_charts_common/src/chart/cartesian/axis/axis.dart'
    as _i16;
import 'package:nimble_charts_common/src/chart/cartesian/axis/collision_report.dart'
    as _i9;
import 'package:nimble_charts_common/src/chart/cartesian/axis/draw_strategy/base_tick_draw_strategy.dart'
    as _i19;
import 'package:nimble_charts_common/src/chart/cartesian/axis/draw_strategy/tick_draw_strategy.dart'
    as _i20;
import 'package:nimble_charts_common/src/chart/cartesian/axis/scale.dart'
    as _i21;
import 'package:nimble_charts_common/src/chart/cartesian/axis/spec/axis_spec.dart'
    as _i14;
import 'package:nimble_charts_common/src/chart/cartesian/axis/tick.dart'
    as _i15;
import 'package:nimble_charts_common/src/chart/cartesian/axis/tick_provider.dart'
    as _i22;
import 'package:nimble_charts_common/src/chart/common/behavior/a11y/a11y_node.dart'
    as _i11;
import 'package:nimble_charts_common/src/chart/common/chart_canvas.dart'
    as _i17;
import 'package:nimble_charts_common/src/chart/common/chart_context.dart'
    as _i7;
import 'package:nimble_charts_common/src/chart/layout/layout_view.dart' as _i10;
import 'package:nimble_charts_common/src/common/date_time_factory.dart' as _i2;
import 'package:nimble_charts_common/src/common/graphics_factory.dart' as _i8;
import 'package:nimble_charts_common/src/common/line_style.dart' as _i3;
import 'package:nimble_charts_common/src/common/text_element.dart' as _i5;
import 'package:nimble_charts_common/src/common/text_measurement.dart' as _i6;
import 'package:nimble_charts_common/src/common/text_style.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDateTimeFactory_0 extends _i1.SmartFake
    implements _i2.DateTimeFactory {
  _FakeDateTimeFactory_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLineStyle_1 extends _i1.SmartFake implements _i3.LineStyle {
  _FakeLineStyle_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTextStyle_2 extends _i1.SmartFake implements _i4.TextStyle {
  _FakeTextStyle_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTextElement_3 extends _i1.SmartFake implements _i5.TextElement {
  _FakeTextElement_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTextMeasurement_4 extends _i1.SmartFake
    implements _i6.TextMeasurement {
  _FakeTextMeasurement_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeChartContext_5 extends _i1.SmartFake implements _i7.ChartContext {
  _FakeChartContext_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGraphicsFactory_6 extends _i1.SmartFake
    implements _i8.GraphicsFactory {
  _FakeGraphicsFactory_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCollisionReport_7<D1> extends _i1.SmartFake
    implements _i9.CollisionReport<D1> {
  _FakeCollisionReport_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeViewMeasuredSizes_8 extends _i1.SmartFake
    implements _i10.ViewMeasuredSizes {
  _FakeViewMeasuredSizes_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLayoutViewConfig_9 extends _i1.SmartFake
    implements _i10.LayoutViewConfig {
  _FakeLayoutViewConfig_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ChartContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockChartContext extends _i1.Mock implements _i7.ChartContext {
  @override
  bool get chartContainerIsRtl => (super.noSuchMethod(
        Invocation.getter(#chartContainerIsRtl),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isRtl => (super.noSuchMethod(
        Invocation.getter(#isRtl),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isTappable => (super.noSuchMethod(
        Invocation.getter(#isTappable),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  double get pixelsPerDp => (super.noSuchMethod(
        Invocation.getter(#pixelsPerDp),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  _i2.DateTimeFactory get dateTimeFactory => (super.noSuchMethod(
        Invocation.getter(#dateTimeFactory),
        returnValue: _FakeDateTimeFactory_0(
          this,
          Invocation.getter(#dateTimeFactory),
        ),
        returnValueForMissingStub: _FakeDateTimeFactory_0(
          this,
          Invocation.getter(#dateTimeFactory),
        ),
      ) as _i2.DateTimeFactory);

  @override
  void requestRedraw() => super.noSuchMethod(
        Invocation.method(
          #requestRedraw,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void requestAnimation(Duration? transition) => super.noSuchMethod(
        Invocation.method(
          #requestAnimation,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void requestPaint() => super.noSuchMethod(
        Invocation.method(
          #requestPaint,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void enableA11yExploreMode(
    List<_i11.A11yNode>? nodes, {
    String? announcement,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #enableA11yExploreMode,
          [nodes],
          {#announcement: announcement},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void disableA11yExploreMode({String? announcement}) => super.noSuchMethod(
        Invocation.method(
          #disableA11yExploreMode,
          [],
          {#announcement: announcement},
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [GraphicsFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockGraphicsFactory extends _i1.Mock implements _i8.GraphicsFactory {
  @override
  _i3.LineStyle createLinePaint() => (super.noSuchMethod(
        Invocation.method(
          #createLinePaint,
          [],
        ),
        returnValue: _FakeLineStyle_1(
          this,
          Invocation.method(
            #createLinePaint,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeLineStyle_1(
          this,
          Invocation.method(
            #createLinePaint,
            [],
          ),
        ),
      ) as _i3.LineStyle);

  @override
  _i4.TextStyle createTextPaint() => (super.noSuchMethod(
        Invocation.method(
          #createTextPaint,
          [],
        ),
        returnValue: _FakeTextStyle_2(
          this,
          Invocation.method(
            #createTextPaint,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeTextStyle_2(
          this,
          Invocation.method(
            #createTextPaint,
            [],
          ),
        ),
      ) as _i4.TextStyle);

  @override
  _i5.TextElement createTextElement(String? text) => (super.noSuchMethod(
        Invocation.method(
          #createTextElement,
          [text],
        ),
        returnValue: _FakeTextElement_3(
          this,
          Invocation.method(
            #createTextElement,
            [text],
          ),
        ),
        returnValueForMissingStub: _FakeTextElement_3(
          this,
          Invocation.method(
            #createTextElement,
            [text],
          ),
        ),
      ) as _i5.TextElement);
}

/// A class which mocks [TextElement].
///
/// See the documentation for Mockito's code generation for more information.
class MockTextElement extends _i1.Mock implements _i5.TextElement {
  @override
  set textStyle(_i4.TextStyle? value) => super.noSuchMethod(
        Invocation.setter(
          #textStyle,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set maxWidth(int? value) => super.noSuchMethod(
        Invocation.setter(
          #maxWidth,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set maxWidthStrategy(_i5.MaxWidthStrategy? maxWidthStrategy) =>
      super.noSuchMethod(
        Invocation.setter(
          #maxWidthStrategy,
          maxWidthStrategy,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set opacity(double? opacity) => super.noSuchMethod(
        Invocation.setter(
          #opacity,
          opacity,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get text => (super.noSuchMethod(
        Invocation.getter(#text),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.getter(#text),
        ),
        returnValueForMissingStub: _i12.dummyValue<String>(
          this,
          Invocation.getter(#text),
        ),
      ) as String);

  @override
  _i6.TextMeasurement get measurement => (super.noSuchMethod(
        Invocation.getter(#measurement),
        returnValue: _FakeTextMeasurement_4(
          this,
          Invocation.getter(#measurement),
        ),
        returnValueForMissingStub: _FakeTextMeasurement_4(
          this,
          Invocation.getter(#measurement),
        ),
      ) as _i6.TextMeasurement);

  @override
  _i5.TextDirection get textDirection => (super.noSuchMethod(
        Invocation.getter(#textDirection),
        returnValue: _i5.TextDirection.ltr,
        returnValueForMissingStub: _i5.TextDirection.ltr,
      ) as _i5.TextDirection);

  @override
  set textDirection(_i5.TextDirection? direction) => super.noSuchMethod(
        Invocation.setter(
          #textDirection,
          direction,
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [TickFormatter].
///
/// See the documentation for Mockito's code generation for more information.
class MockNumericTickFormatter extends _i1.Mock
    implements _i13.TickFormatter<num> {
  @override
  List<String> format(
    List<num>? tickValues,
    Map<num, String>? cache, {
    num? stepSize,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #format,
          [
            tickValues,
            cache,
          ],
          {#stepSize: stepSize},
        ),
        returnValue: <String>[],
        returnValueForMissingStub: <String>[],
      ) as List<String>);
}

/// A class which mocks [BaseTickDrawStrategy].
///
/// See the documentation for Mockito's code generation for more information.
class MockDrawStrategy<D> extends _i1.Mock
    implements _i13.BaseTickDrawStrategy<D> {
  @override
  _i7.ChartContext get chartContext => (super.noSuchMethod(
        Invocation.getter(#chartContext),
        returnValue: _FakeChartContext_5(
          this,
          Invocation.getter(#chartContext),
        ),
        returnValueForMissingStub: _FakeChartContext_5(
          this,
          Invocation.getter(#chartContext),
        ),
      ) as _i7.ChartContext);

  @override
  _i8.GraphicsFactory get graphicsFactory => (super.noSuchMethod(
        Invocation.getter(#graphicsFactory),
        returnValue: _FakeGraphicsFactory_6(
          this,
          Invocation.getter(#graphicsFactory),
        ),
        returnValueForMissingStub: _FakeGraphicsFactory_6(
          this,
          Invocation.getter(#graphicsFactory),
        ),
      ) as _i8.GraphicsFactory);

  @override
  _i3.LineStyle get axisLineStyle => (super.noSuchMethod(
        Invocation.getter(#axisLineStyle),
        returnValue: _FakeLineStyle_1(
          this,
          Invocation.getter(#axisLineStyle),
        ),
        returnValueForMissingStub: _FakeLineStyle_1(
          this,
          Invocation.getter(#axisLineStyle),
        ),
      ) as _i3.LineStyle);

  @override
  set axisLineStyle(_i3.LineStyle? _axisLineStyle) => super.noSuchMethod(
        Invocation.setter(
          #axisLineStyle,
          _axisLineStyle,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.TextStyle get labelStyle => (super.noSuchMethod(
        Invocation.getter(#labelStyle),
        returnValue: _FakeTextStyle_2(
          this,
          Invocation.getter(#labelStyle),
        ),
        returnValueForMissingStub: _FakeTextStyle_2(
          this,
          Invocation.getter(#labelStyle),
        ),
      ) as _i4.TextStyle);

  @override
  set labelStyle(_i4.TextStyle? _labelStyle) => super.noSuchMethod(
        Invocation.setter(
          #labelStyle,
          _labelStyle,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i14.TickLabelJustification get tickLabelJustification => (super.noSuchMethod(
        Invocation.getter(#tickLabelJustification),
        returnValue: _i14.TickLabelJustification.inside,
        returnValueForMissingStub: _i14.TickLabelJustification.inside,
      ) as _i14.TickLabelJustification);

  @override
  set tickLabelJustification(
          _i14.TickLabelJustification? _tickLabelJustification) =>
      super.noSuchMethod(
        Invocation.setter(
          #tickLabelJustification,
          _tickLabelJustification,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get minimumPaddingBetweenLabelsPx => (super.noSuchMethod(
        Invocation.getter(#minimumPaddingBetweenLabelsPx),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  set minimumPaddingBetweenLabelsPx(int? _minimumPaddingBetweenLabelsPx) =>
      super.noSuchMethod(
        Invocation.setter(
          #minimumPaddingBetweenLabelsPx,
          _minimumPaddingBetweenLabelsPx,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int labelRotation({required bool? collision}) => (super.noSuchMethod(
        Invocation.method(
          #labelRotation,
          [],
          {#collision: collision},
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  int labelOffsetFromAxisPx({required bool? collision}) => (super.noSuchMethod(
        Invocation.method(
          #labelOffsetFromAxisPx,
          [],
          {#collision: collision},
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  int labelOffsetFromTickPx({required bool? collision}) => (super.noSuchMethod(
        Invocation.method(
          #labelOffsetFromTickPx,
          [],
          {#collision: collision},
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i14.TickLabelAnchor tickLabelAnchor({required bool? collision}) =>
      (super.noSuchMethod(
        Invocation.method(
          #tickLabelAnchor,
          [],
          {#collision: collision},
        ),
        returnValue: _i14.TickLabelAnchor.before,
        returnValueForMissingStub: _i14.TickLabelAnchor.before,
      ) as _i14.TickLabelAnchor);

  @override
  void decorateTicks(List<_i15.Tick<D>>? ticks) => super.noSuchMethod(
        Invocation.method(
          #decorateTicks,
          [ticks],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateTickWidth(
    List<_i15.Tick<D>>? ticks,
    int? maxWidth,
    int? maxHeight,
    _i16.AxisOrientation? orientation, {
    bool? collision = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #updateTickWidth,
          [
            ticks,
            maxWidth,
            maxHeight,
            orientation,
          ],
          {#collision: collision},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.CollisionReport<D> collides(
    List<_i15.Tick<D>>? ticks,
    _i16.AxisOrientation? orientation,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #collides,
          [
            ticks,
            orientation,
          ],
        ),
        returnValue: _FakeCollisionReport_7<D>(
          this,
          Invocation.method(
            #collides,
            [
              ticks,
              orientation,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeCollisionReport_7<D>(
          this,
          Invocation.method(
            #collides,
            [
              ticks,
              orientation,
            ],
          ),
        ),
      ) as _i9.CollisionReport<D>);

  @override
  _i10.ViewMeasuredSizes measureVerticallyDrawnTicks(
    List<_i15.Tick<D>>? ticks,
    int? maxWidth,
    int? maxHeight, {
    bool? collision = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #measureVerticallyDrawnTicks,
          [
            ticks,
            maxWidth,
            maxHeight,
          ],
          {#collision: collision},
        ),
        returnValue: _FakeViewMeasuredSizes_8(
          this,
          Invocation.method(
            #measureVerticallyDrawnTicks,
            [
              ticks,
              maxWidth,
              maxHeight,
            ],
            {#collision: collision},
          ),
        ),
        returnValueForMissingStub: _FakeViewMeasuredSizes_8(
          this,
          Invocation.method(
            #measureVerticallyDrawnTicks,
            [
              ticks,
              maxWidth,
              maxHeight,
            ],
            {#collision: collision},
          ),
        ),
      ) as _i10.ViewMeasuredSizes);

  @override
  _i10.ViewMeasuredSizes measureHorizontallyDrawnTicks(
    List<_i15.Tick<D>>? ticks,
    int? maxWidth,
    int? maxHeight, {
    bool? collision = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #measureHorizontallyDrawnTicks,
          [
            ticks,
            maxWidth,
            maxHeight,
          ],
          {#collision: collision},
        ),
        returnValue: _FakeViewMeasuredSizes_8(
          this,
          Invocation.method(
            #measureHorizontallyDrawnTicks,
            [
              ticks,
              maxWidth,
              maxHeight,
            ],
            {#collision: collision},
          ),
        ),
        returnValueForMissingStub: _FakeViewMeasuredSizes_8(
          this,
          Invocation.method(
            #measureHorizontallyDrawnTicks,
            [
              ticks,
              maxWidth,
              maxHeight,
            ],
            {#collision: collision},
          ),
        ),
      ) as _i10.ViewMeasuredSizes);

  @override
  void drawAxisLine(
    _i17.ChartCanvas? canvas,
    _i16.AxisOrientation? orientation,
    _i18.Rectangle<int>? axisBounds,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #drawAxisLine,
          [
            canvas,
            orientation,
            axisBounds,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void drawLabel(
    _i17.ChartCanvas? canvas,
    _i15.Tick<D>? tick, {
    required _i16.AxisOrientation? orientation,
    required _i18.Rectangle<int>? axisBounds,
    required _i18.Rectangle<int>? drawAreaBounds,
    required bool? isFirst,
    required bool? isLast,
    bool? collision = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #drawLabel,
          [
            canvas,
            tick,
          ],
          {
            #orientation: orientation,
            #axisBounds: axisBounds,
            #drawAreaBounds: drawAreaBounds,
            #isFirst: isFirst,
            #isLast: isLast,
            #collision: collision,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i19.PixelVerticalDirection normalizeVerticalAnchor(
    _i14.TickLabelAnchor? anchor,
    bool? isFirst,
    bool? isLast,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #normalizeVerticalAnchor,
          [
            anchor,
            isFirst,
            isLast,
          ],
        ),
        returnValue: _i19.PixelVerticalDirection.over,
        returnValueForMissingStub: _i19.PixelVerticalDirection.over,
      ) as _i19.PixelVerticalDirection);

  @override
  double calculateWidthForRotatedLabel(
    int? rotation,
    double? labelHeight,
    double? labelLength,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #calculateWidthForRotatedLabel,
          [
            rotation,
            labelHeight,
            labelLength,
          ],
        ),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  double calculateHeightForRotatedLabel(
    int? rotation,
    double? labelHeight,
    double? labelLength,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #calculateHeightForRotatedLabel,
          [
            rotation,
            labelHeight,
            labelLength,
          ],
        ),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  List<_i5.TextElement> splitLabel(_i5.TextElement? wholeLabel) =>
      (super.noSuchMethod(
        Invocation.method(
          #splitLabel,
          [wholeLabel],
        ),
        returnValue: <_i5.TextElement>[],
        returnValueForMissingStub: <_i5.TextElement>[],
      ) as List<_i5.TextElement>);

  @override
  double getLabelWidth(Iterable<_i5.TextElement>? labelElements) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLabelWidth,
          [labelElements],
        ),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  double getLabelHeight(Iterable<_i5.TextElement>? labelElements) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLabelHeight,
          [labelElements],
        ),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  void draw(
    _i17.ChartCanvas? canvas,
    _i15.Tick<D>? tick, {
    required _i16.AxisOrientation? orientation,
    required _i18.Rectangle<int>? axisBounds,
    required _i18.Rectangle<int>? drawAreaBounds,
    required bool? isFirst,
    required bool? isLast,
    bool? collision = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #draw,
          [
            canvas,
            tick,
          ],
          {
            #orientation: orientation,
            #axisBounds: axisBounds,
            #drawAreaBounds: drawAreaBounds,
            #isFirst: isFirst,
            #isLast: isLast,
            #collision: collision,
          },
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [TickDrawStrategy].
///
/// See the documentation for Mockito's code generation for more information.
class MockTickDrawStrategy extends _i1.Mock
    implements _i20.TickDrawStrategy<num> {
  @override
  void decorateTicks(List<_i15.Tick<num>>? ticks) => super.noSuchMethod(
        Invocation.method(
          #decorateTicks,
          [ticks],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.CollisionReport<num> collides(
    List<_i15.Tick<num>>? ticks,
    _i16.AxisOrientation? orientation,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #collides,
          [
            ticks,
            orientation,
          ],
        ),
        returnValue: _FakeCollisionReport_7<num>(
          this,
          Invocation.method(
            #collides,
            [
              ticks,
              orientation,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeCollisionReport_7<num>(
          this,
          Invocation.method(
            #collides,
            [
              ticks,
              orientation,
            ],
          ),
        ),
      ) as _i9.CollisionReport<num>);

  @override
  _i10.ViewMeasuredSizes measureVerticallyDrawnTicks(
    List<_i15.Tick<num>>? ticks,
    int? maxWidth,
    int? maxHeight, {
    bool? collision = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #measureVerticallyDrawnTicks,
          [
            ticks,
            maxWidth,
            maxHeight,
          ],
          {#collision: collision},
        ),
        returnValue: _FakeViewMeasuredSizes_8(
          this,
          Invocation.method(
            #measureVerticallyDrawnTicks,
            [
              ticks,
              maxWidth,
              maxHeight,
            ],
            {#collision: collision},
          ),
        ),
        returnValueForMissingStub: _FakeViewMeasuredSizes_8(
          this,
          Invocation.method(
            #measureVerticallyDrawnTicks,
            [
              ticks,
              maxWidth,
              maxHeight,
            ],
            {#collision: collision},
          ),
        ),
      ) as _i10.ViewMeasuredSizes);

  @override
  _i10.ViewMeasuredSizes measureHorizontallyDrawnTicks(
    List<_i15.Tick<num>>? ticks,
    int? maxWidth,
    int? maxHeight, {
    bool? collision = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #measureHorizontallyDrawnTicks,
          [
            ticks,
            maxWidth,
            maxHeight,
          ],
          {#collision: collision},
        ),
        returnValue: _FakeViewMeasuredSizes_8(
          this,
          Invocation.method(
            #measureHorizontallyDrawnTicks,
            [
              ticks,
              maxWidth,
              maxHeight,
            ],
            {#collision: collision},
          ),
        ),
        returnValueForMissingStub: _FakeViewMeasuredSizes_8(
          this,
          Invocation.method(
            #measureHorizontallyDrawnTicks,
            [
              ticks,
              maxWidth,
              maxHeight,
            ],
            {#collision: collision},
          ),
        ),
      ) as _i10.ViewMeasuredSizes);

  @override
  void updateTickWidth(
    List<_i15.Tick<num>>? ticks,
    int? maxWidth,
    int? maxHeight,
    _i16.AxisOrientation? orientation, {
    bool? collision = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #updateTickWidth,
          [
            ticks,
            maxWidth,
            maxHeight,
            orientation,
          ],
          {#collision: collision},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void draw(
    _i17.ChartCanvas? canvas,
    _i15.Tick<num>? tick, {
    required _i16.AxisOrientation? orientation,
    required _i18.Rectangle<int>? axisBounds,
    required _i18.Rectangle<int>? drawAreaBounds,
    required bool? isFirst,
    required bool? isLast,
    bool? collision = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #draw,
          [
            canvas,
            tick,
          ],
          {
            #orientation: orientation,
            #axisBounds: axisBounds,
            #drawAreaBounds: drawAreaBounds,
            #isFirst: isFirst,
            #isLast: isLast,
            #collision: collision,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void drawAxisLine(
    _i17.ChartCanvas? canvas,
    _i16.AxisOrientation? orientation,
    _i18.Rectangle<int>? axisBounds,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #drawAxisLine,
          [
            canvas,
            orientation,
            axisBounds,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Axis].
///
/// See the documentation for Mockito's code generation for more information.
class MockAxis extends _i1.Mock implements _i16.Axis<String> {
  @override
  set scale(_i21.MutableScale<String>? _scale) => super.noSuchMethod(
        Invocation.setter(
          #scale,
          _scale,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set tickProvider(_i22.TickProvider<String>? _tickProvider) =>
      super.noSuchMethod(
        Invocation.setter(
          #tickProvider,
          _tickProvider,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set tickDrawStrategy(_i20.TickDrawStrategy<String>? _tickDrawStrategy) =>
      super.noSuchMethod(
        Invocation.setter(
          #tickDrawStrategy,
          _tickDrawStrategy,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set axisOrientation(_i16.AxisOrientation? _axisOrientation) =>
      super.noSuchMethod(
        Invocation.setter(
          #axisOrientation,
          _axisOrientation,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set context(_i7.ChartContext? _context) => super.noSuchMethod(
        Invocation.setter(
          #context,
          _context,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get reverseOutputRange => (super.noSuchMethod(
        Invocation.getter(#reverseOutputRange),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set reverseOutputRange(bool? _reverseOutputRange) => super.noSuchMethod(
        Invocation.setter(
          #reverseOutputRange,
          _reverseOutputRange,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get autoViewport => (super.noSuchMethod(
        Invocation.getter(#autoViewport),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set autoViewport(bool? _autoViewport) => super.noSuchMethod(
        Invocation.setter(
          #autoViewport,
          _autoViewport,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set forceDrawAxisLine(bool? _forceDrawAxisLine) => super.noSuchMethod(
        Invocation.setter(
          #forceDrawAxisLine,
          _forceDrawAxisLine,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get lockAxis => (super.noSuchMethod(
        Invocation.getter(#lockAxis),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set lockAxis(bool? _lockAxis) => super.noSuchMethod(
        Invocation.setter(
          #lockAxis,
          _lockAxis,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get layoutPaintOrder => (super.noSuchMethod(
        Invocation.getter(#layoutPaintOrder),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  set layoutPaintOrder(int? _layoutPaintOrder) => super.noSuchMethod(
        Invocation.setter(
          #layoutPaintOrder,
          _layoutPaintOrder,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasTickCollision => (super.noSuchMethod(
        Invocation.getter(#hasTickCollision),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set hasTickCollision(bool? _hasTickCollision) => super.noSuchMethod(
        Invocation.setter(
          #hasTickCollision,
          _hasTickCollision,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set graphicsFactory(_i8.GraphicsFactory? _graphicsFactory) =>
      super.noSuchMethod(
        Invocation.setter(
          #graphicsFactory,
          _graphicsFactory,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set tickFormatter(_i13.TickFormatter<String>? formatter) =>
      super.noSuchMethod(
        Invocation.setter(
          #tickFormatter,
          formatter,
        ),
        returnValueForMissingStub: null,
      );

  @override
  double get rangeBand => (super.noSuchMethod(
        Invocation.getter(#rangeBand),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  double get stepSize => (super.noSuchMethod(
        Invocation.getter(#stepSize),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  bool get hasValidBarChartRangeBandConfig => (super.noSuchMethod(
        Invocation.getter(#hasValidBarChartRangeBandConfig),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  double get viewportScalingFactor => (super.noSuchMethod(
        Invocation.getter(#viewportScalingFactor),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  double get viewportTranslatePx => (super.noSuchMethod(
        Invocation.getter(#viewportTranslatePx),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  _i10.LayoutViewConfig get layoutConfig => (super.noSuchMethod(
        Invocation.getter(#layoutConfig),
        returnValue: _FakeLayoutViewConfig_9(
          this,
          Invocation.getter(#layoutConfig),
        ),
        returnValueForMissingStub: _FakeLayoutViewConfig_9(
          this,
          Invocation.getter(#layoutConfig),
        ),
      ) as _i10.LayoutViewConfig);

  @override
  bool get isVertical => (super.noSuchMethod(
        Invocation.getter(#isVertical),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isSeriesRenderer => (super.noSuchMethod(
        Invocation.getter(#isSeriesRenderer),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get drawAxisLine => (super.noSuchMethod(
        Invocation.getter(#drawAxisLine),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void setRangeBandConfig(_i21.RangeBandConfig? rangeBandConfig) =>
      super.noSuchMethod(
        Invocation.method(
          #setRangeBandConfig,
          [rangeBandConfig],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addDomainValue(String? domain) => super.noSuchMethod(
        Invocation.method(
          #addDomainValue,
          [domain],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void resetDefaultConfiguration() => super.noSuchMethod(
        Invocation.method(
          #resetDefaultConfiguration,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void resetDomains() => super.noSuchMethod(
        Invocation.method(
          #resetDomains,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  String getDomain(double? location) => (super.noSuchMethod(
        Invocation.method(
          #getDomain,
          [location],
        ),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.method(
            #getDomain,
            [location],
          ),
        ),
        returnValueForMissingStub: _i12.dummyValue<String>(
          this,
          Invocation.method(
            #getDomain,
            [location],
          ),
        ),
      ) as String);

  @override
  int compareDomainValueToViewport(String? domain) => (super.noSuchMethod(
        Invocation.method(
          #compareDomainValueToViewport,
          [domain],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  void setOutputRange(
    int? start,
    int? end,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setOutputRange,
          [
            start,
            end,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateTicks() => super.noSuchMethod(
        Invocation.method(
          #updateTicks,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setViewportSettings(
    double? viewportScale,
    double? viewportTranslatePx, {
    int? drawAreaWidth,
    int? drawAreaHeight,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setViewportSettings,
          [
            viewportScale,
            viewportTranslatePx,
          ],
          {
            #drawAreaWidth: drawAreaWidth,
            #drawAreaHeight: drawAreaHeight,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.ViewMeasuredSizes measure(
    int? maxWidth,
    int? maxHeight,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #measure,
          [
            maxWidth,
            maxHeight,
          ],
        ),
        returnValue: _FakeViewMeasuredSizes_8(
          this,
          Invocation.method(
            #measure,
            [
              maxWidth,
              maxHeight,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeViewMeasuredSizes_8(
          this,
          Invocation.method(
            #measure,
            [
              maxWidth,
              maxHeight,
            ],
          ),
        ),
      ) as _i10.ViewMeasuredSizes);

  @override
  void layout(
    _i18.Rectangle<int>? componentBounds,
    _i18.Rectangle<int>? drawAreaBounds,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #layout,
          [
            componentBounds,
            drawAreaBounds,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void paint(
    _i17.ChartCanvas? canvas,
    double? animationPercent,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #paint,
          [
            canvas,
            animationPercent,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
